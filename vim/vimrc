set nocompatible

" Assume a fast terminal connection.
set ttyfast

" Ensure UTF-8 internal encoding.
" Prefer UTF-8 file encoding but allow fall-back.
if has('vim_starting')
  set encoding=utf-8
  set fileencodings=utf-8,latin1
endif

" Don't store backups; do make temps when writing to file.
set nobackup
set noswapfile

" Allow changing the buffer without saving first.
set hidden

" Number of lines to retain in Vim's history.
set history=700

" A map leader can be used to alias commands.
map <Space> <Leader>

" Quick save.
nnoremap <Leader>fs :w!<CR>

" Fast editing of $VIM/.vim/vimrc
noremap <Leader>e :e! ~/.vim/vimrc<CR>

" Reload vimrc after edit.
autocmd! BufWritePost vimrc source ~/.vim/vimrc

" Spacemacs-like bindings.

" Buffer manipulation.
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>
nnoremap <Leader>bd :bdelete<CR>

" Window manipulation.
nnoremap <Leader>wsh :split<CR>
nnoremap <Leader>wsv :vsplit<CR>
nnoremap <Leader>wc :close<CR>

nnoremap <Leader>wj <C-W>j
nnoremap <Leader>wk <C-W>k
nnoremap <Leader>wh <C-W>h
nnoremap <Leader>wl <C-W>l

" Tab manipulation.
noremap <Leader>tn :tabnew! %<CR>
noremap <Leader>te :tabedit
noremap <Leader>tc :tabclose<CR>
noremap <Leader>tm :tabmove

" Option manipulation.
nnoremap <Leader>osh :set invhlsearch<CR>
nnoremap <Leader>osp :set invpaste paste?<CR>

" Yank buffer to clipboard.
nnoremap <Leader>ya :%ya+<CR>

" Ctrl-U in insert mode deletes a lot. Use Ctrl-G u to first break undo,
" so that you can undo Ctrl-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Map jf to to leave insert mode.
inoremap jf <Esc>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

let $NVIM_TUI_ENABLE_TRUE_COLOR=1

if $TERM =~ '\(xterm\|screen\)'
  set t_ut=
endif

call plug#begin('~/.vim/bundle')

Plug 'freeo/vim-kalisi'
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc', { 'do': 'make' }
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'vim-pandoc/vim-pandoc', { 'for': 'markdown' }
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'markdown' }
Plug 'tpope/vim-surround'

call plug#end()

if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on GVim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") |
          \   exe "normal! g`\"" |
          \ endif

  augroup END
else
  set autoindent        " always set autoindenting on
endif

" 7 line vertical scroll buffer.
set scrolloff=7

" Display linenumbers.
set number

" Wildmenu displays auto completion options in a menu
" above the command line when pressing <TAB>.
set wildmenu
set wildmode=list:longest,full
set wildignore+=*.class
set wildignorecase

" Show current position.
set ruler

" Reduce 'press Enter ...' messages-
set cmdheight=2

" Backspace traverses special characters.
set backspace=eol,start,indent

" Additional characters allowed to traverse line breaks.
set whichwrap+=<,>,h,l

" Report all line changes from :substitute.
set report=0

" Highlight search matches.
set hlsearch

" Case insensitive searching.
set ignorecase

" Case sensitive searching if pattern contains capital letters.
set smartcase

" Incremental search (search 'on-input').
set incsearch

" Don't redraw while executing macros.
set lazyredraw

" Magic makes regexp work 'normally' in Vim.
set magic

" Show matching braces.
set showmatch

" Tenths of second to display matching brace.
set matchtime=2

" Extra section delimiters to match.
set matchpairs+=<:>

" Disable bells and whistles.
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Navigate to last and next compiler error.
noremap <silent> <F6> <Esc>:make<CR><CR>
noremap <silent> <F7> <Esc>:cprevious<CR>
noremap <silent> <F8> <Esc>:cnext<CR>

set colorcolumn=81

" Substitute spaces for tabs.
set expandtab

" Number of spaces in a level of indentation.
set shiftwidth=4

" Indent to nearest shiftwidth-divisible column.
set shiftround

" Retain standard 8-space Tab to preserve files
" written for that.
set tabstop=8

" Tab in front of line will insert 'shiftwidth' spaces.
set smarttab

" Wrap long lines at 'breakat,' not last character on
" line.
set linebreak

" Multiple spaces is a crime against language everywhere.
set nojoinspaces

" Automatically wrap line-display. Does not change text.
set wrap

nnoremap <Leader><Space> /
nnoremap <Leader><S-Space> ?

" Search for the word under the cursor but don't jump to next occurrence.
nnoremap * *<C-O>

" Specify the behaviour when switching between buffers.
try
  set switchbuf=usetab
  " Show tab line only if there are at least two tabs.
  set showtabline=1
catch
endtry

" Always show the statusbar.
set laststatus=2

" Format the statusline. The default statusline is
" %<%f\ %h%m%r%=%-14.(%1,%c%V%)\ %P
set statusline=                 " Clear for when vimrc is reloaded.
set statusline+=[%n]\           " Buffer number.
set statusline+=%<%.99f\        " Relative file path, max 99 characters.
set statusline+=[%{strlen(&fenc)?&fenc:'none'},%{&ff}] " Encoding, format.
set statusline+=%h%m%r%y        " Flags: help buffer, modified, read-only, file type.
set statusline+=%=              " Right-align rest.
set statusline+=%l/%L:%c\       " Current line / total lines, column.
set statusline+=%P              " Percentage through file.

" Move a line of text using Alt+[jk].
nnoremap <M-k> mz:m-2<CR>`z
nnoremap <M-j> mz:m+<CR>`z
vnoremap <M-k> :m'<-2<CR>`>my`<mzgv`yo`z
vnoremap <M-j> :m'>+<CR>`<my`>mzgv`yo`z

" Repeat last action and return to starting position.
nnoremap . .`[

" Emacs-bindings in command mode.
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

set showcmd

call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <Leader>f :<C-u>Unite -start-insert -profile-name=files file<CR>
nnoremap <Leader>r :<C-u>Unite -start-insert file_rec/async<CR>
nnoremap <Leader>ag :<C-u>Unite grep:.<CR>

if executable('ag')
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m
  let g:unite_source_grep_command='ag'
  let g:unite_source_grep_default_opts='--nocolor --nogroup --smart-case -C2'
  let g:unite_source_grep_recursive_opt=''
endif

let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#command#autoexec_on_writes = 1

let g:ycm_filetype_blacklist = {
      \ 'notes': 1,
      \ 'unite': 1,
      \ 'tagbar': 1,
      \ 'qf': 1,
      \ 'vimwiki': 1,
      \ 'infolog': 1,
      \ 'mail': 1
      \}

colorscheme kalisi
set background=dark
